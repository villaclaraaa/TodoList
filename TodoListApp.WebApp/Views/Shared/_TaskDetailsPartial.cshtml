@model TodoListApp.WebApp.Models.TodoTaskModel
@using TodoListApp.WebApp.Services

<div class="modal fade" id="taskDetailsModal-@Model.Id" tabindex="-1" aria-labelledby="taskDetailsModalLabel-@Model.Id" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskDetailsModalLabel-@Model.Id">
                    Task Details: @Model.Title
                    @if (Model.IsCompleted)
                    {
                        <span class="badge bg-success ms-2">Completed</span>
                    }
                    else if (Model.Status == TodoListApp.WebApp.Models.TaskStatus.InProgress)
                    {
                        <span class="badge bg-info ms-2">In Progress</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary ms-2">Not Started</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-12">
                        <!-- Main details -->
                        <div class="card mb-3">
                            <div class="card-body">
                                <dl class="row">
                                    <dt class="col-sm-3">Description</dt>
                                    <dd class="col-sm-9">
                                        @if (string.IsNullOrWhiteSpace(Model.Description))
                                        {
                                            <span class="text-muted">No description</span>
                                        }
                                        else
                                        {
                                            @Model.Description
                                        }
                                    </dd>

                                    <dt class="col-sm-3">Due Date</dt>
                                    <dd class="col-sm-9">
                                        @if (Model.DueDate.HasValue)
                                        {
                                            <span class="@(Model.IsOverdue ? "text-danger fw-bold" : "")">
                                                @Model.DueDate.Value.ToString("yyyy-MM-dd HH:mm")
                                                @if (Model.IsOverdue)
                                                {
                                                    <span class="badge bg-danger ms-2">Overdue</span>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No due date</span>
                                        }
                                    </dd>

                                    <dt class="col-sm-3">Created</dt>
                                    <dd class="col-sm-9">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</dd>

                                    <dt class="col-sm-3">Assigned To</dt>
                                    <dd class="col-sm-9">
                                         @if (ViewBag.UserNames != null && ViewBag.UserNames.ContainsKey(Model.AssignedUserId))
                                        {
                                            @ViewBag.UserNames[Model.AssignedUserId]
                                        }
                                        else if (Model.AssignedUserId != Guid.Empty)
                                        {
                                            <span>User ID: @Model.AssignedUserId</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Unassigned</span>
                                        }
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        <!-- Tags -->
                        <div class="card mb-3">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Tags</h6>
                                <button class="btn btn-sm btn-outline-primary" type="button" 
                                        data-bs-toggle="collapse" data-bs-target="#addTagCollapse-@Model.Id" 
                                        aria-expanded="false" aria-controls="addTagCollapse-@Model.Id">
                                    Add Tag
                                </button>
                            </div>
                            <div class="collapse" id="addTagCollapse-@Model.Id">
                                <div class="card-body border-bottom">
                                    <form asp-controller="Task" asp-action="AddTag" method="post" class="row g-2">
                                        <input type="hidden" name="taskId" value="@Model.Id" />
                                        <input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                        <div class="col-md-8">
                                            <select name="tag" class="form-select">
                                                    @foreach (var tag in TagsService.PredefinedTags)
                                                    {
                                                        if (Model.Tags == null || !Model.Tags.Contains(tag))
                                                        {
                                                            <option value="@tag">@tag</option>
                                                        }
                                                    }
                                            </select>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="submit" class="btn btn-primary">Add</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (Model.Tags != null && Model.Tags.Any())
                                {
                                    <div>
                                    @foreach (var tag in Model.Tags)
                                    {
                                            <div class="d-inline-block me-2 mb-2">
                                                <span class="badge bg-secondary">@tag</span>
                                                <form asp-controller="Task" asp-action="RemoveTag" method="post" class="d-inline">
                                                    <input type="hidden" name="taskId" value="@Model.Id" />
                                                    <input type="hidden" name="tag" value="@tag" />
                                                    <input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                                    <button type="submit" class="btn btn-sm btn-outline-danger py-0 px-1">Ã—</button>
                                                </form>
                                            </div>
                                    }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted">No tags assigned</p>
                                }
                            </div>
                        </div>

                        <!-- Comments -->
                        <div class="card">
							<div class="card-header bg-light d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Comments</h6>
								<button class="btn btn-sm btn-outline-primary" type="button" 
										data-bs-toggle="collapse" data-bs-target="#addCommentCollapse-@Model.Id" 
										aria-expanded="false" aria-controls="addCommentCollapse-@Model.Id">
									Add Comment
								</button>
                            </div>
							<div class="collapse" id="addCommentCollapse-@Model.Id">
								<div class="card-body border-bottom">
									<form asp-controller="Task" asp-action="AddComment" method="post">
										<input type="hidden" name="taskId" value="@Model.Id" />
										<input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
										<div class="mb-3">
											<textarea name="commentText" class="form-control" rows="3" placeholder="Enter your comment"></textarea>
										</div>
										<div class="text-end">
											<button type="submit" class="btn btn-primary">Save Comment</button>
										</div>
									</form>
								</div>
							</div>
                            <div class="card-body">
                                @if (Model.Comments != null && Model.Comments.Any())
                                {
									var comments = Model.Comments.ToList(); 
                                    <ul class="list-group list-group-flush">
										@for (int i = 0; i < Model.Comments.Count; i++)
                                        {
											var comment = comments[i];
											<li class="list-group-item">
												<div class="d-flex justify-content-between">
													<div class="comment-text">
														<span id="comment-@Model.Id-@i">@comment</span>
													</div>
													<div class="comment-actions">
														<button class="btn btn-sm btn-outline-primary edit-comment-btn" 
																data-task-id="@Model.Id" 
																data-comment-index="@i"
																data-comment-text="@comment"
																type="button">
															Edit
														</button>
														<form asp-controller="Task" asp-action="DeleteComment" method="post" class="d-inline">
															<input type="hidden" name="taskId" value="@Model.Id" />
															<input type="hidden" name="commentIndex" value="@i" />
															<input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
															<button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
														</form>
													</div>
												</div>
												<div id="edit-form-@Model.Id-@i" style="display: none;" class="mt-2">
													<form asp-controller="Task" asp-action="EditComment" method="post">
														<input type="hidden" name="taskId" value="@Model.Id" />
														<input type="hidden" name="commentIndex" value="@i" />
														<input type="hidden" name="returnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
														<div class="mb-2">
															<textarea name="commentText" class="form-control" rows="2">@comment</textarea>
														</div>
														<div>
															<button type="submit" class="btn btn-sm btn-primary">Save</button>
															<button type="button" class="btn btn-sm btn-secondary cancel-edit-btn" 
																	data-task-id="@Model.Id" 
																	data-comment-index="@i">Cancel</button>
														</div>
													</form>
												</div>
											</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="text-muted">No comments</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize the task details modal event handlers
    (function() {
        const modalId = 'taskDetailsModal-@Model.Id';
        const modal = document.getElementById(modalId);
        
        if (modal) {
            // Make sure we initialize when the modal is shown
            modal.addEventListener('shown.bs.modal', function() {
                initTaskDetailsModal('@Model.Id');
            });
            
            // Initialize immediately if modal is already visible
            if (modal.classList.contains('show')) {
                initTaskDetailsModal('@Model.Id');
            }
        }
        
        function initTaskDetailsModal(taskId) {
            // Handle edit comment button clicks
            document.querySelectorAll(`#taskDetailsModal-${taskId} .edit-comment-btn`).forEach(button => {
                // Remove existing event listeners to avoid duplicates
                button.replaceWith(button.cloneNode(true));
                
                // Re-select the button after cloning
                const newButton = document.querySelector(`#taskDetailsModal-${taskId} .edit-comment-btn[data-task-id="${button.getAttribute('data-task-id')}"][data-comment-index="${button.getAttribute('data-comment-index')}"]`);
                
                newButton.addEventListener('click', function() {
                    const commentTaskId = this.getAttribute('data-task-id');
                    const commentIndex = this.getAttribute('data-comment-index');
                    const editForm = document.getElementById(`edit-form-${commentTaskId}-${commentIndex}`);
                    
                    if (editForm) {
                        // Show the edit form
                        editForm.style.display = 'block';
                        // Hide the comment text and action buttons
                        this.closest('.comment-actions').style.display = 'none';
                    }
                });
            });
            
            // Handle cancel edit button clicks
            document.querySelectorAll(`#taskDetailsModal-${taskId} .cancel-edit-btn`).forEach(button => {
                // Remove existing event listeners to avoid duplicates
                button.replaceWith(button.cloneNode(true));
                
                // Re-select the button after cloning
                const newButton = document.querySelector(`#taskDetailsModal-${taskId} .cancel-edit-btn[data-task-id="${button.getAttribute('data-task-id')}"][data-comment-index="${button.getAttribute('data-comment-index')}"]`);
                
                newButton.addEventListener('click', function() {
                    const commentTaskId = this.getAttribute('data-task-id');
                    const commentIndex = this.getAttribute('data-comment-index');
                    const editForm = document.getElementById(`edit-form-${commentTaskId}-${commentIndex}`);
                    
                    if (editForm) {
                        // Hide the edit form
                        editForm.style.display = 'none';
                        // Show the comment text and action buttons
                        this.closest('li').querySelector('.comment-actions').style.display = 'block';
                    }
                });
            });
            
            // Intercept form submissions to keep modal open
            document.querySelectorAll(`#taskDetailsModal-${taskId} .tag-form, #taskDetailsModal-${taskId} .comment-form`).forEach(form => {
                form.addEventListener('submit', function(e) {
                    // Store current modal state
                    const modalElement = document.getElementById(`taskDetailsModal-${taskId}`);
                    const modalBackdrop = document.querySelector('.modal-backdrop');
                    
                    // Store scroll position
                    const scrollPos = window.scrollY;
                    
                    // Override default form submission behavior - submit normally, but
                    // manually reopen modal after page reload
                    sessionStorage.setItem('reopen-task-modal', taskId);
                    sessionStorage.setItem('scroll-position', scrollPos);
                });
            });
        }
    })();
</script>